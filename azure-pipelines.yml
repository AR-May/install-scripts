trigger:
  - master

pr:
  - master

variables:
- group: DotNet-Install-Scripts-BuildPipeline-Params
- template: eng/common-variables.yml

stages:
- stage: build
  displayName: Build
  jobs:
  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      artifacts:
        publish:
          artifacts: true
          logs: true
          manifests: true
      enableMicrobuild: true
      enablePublishUsingPipelines: true
      useBuildManifest: ${{ variables['_UseBuildManifest'] }}
      workspace:
        clean: all
      jobs:
      - job: Windows_NT
        timeoutInMinutes: 90
        pool:
          ${{ if eq(variables._RunAsPublic, True) }}:
            name: NetCorePublic-Pool
            queue: BuildPool.Server.Amd64.VS2017.Arcade.Open
          ${{ if eq(variables._RunAsInternal, True) }}:
            name: NetCoreInternal-Pool
            queue: BuildPool.Server.Amd64.VS2017.Arcade
        strategy:
          matrix:
            ${{ if eq(variables._RunAsInternal, True) }}:
              Build_Release:
                _BuildConfig: Release
            ${{ if eq(variables._RunAsPublic, True) }}:
              Build_Debug:
                _BuildConfig: Debug
        preSteps:
        - checkout: self
          clean: true
        steps:
        - task: UseDotNet@2
          displayName: Get .NET Core SDK
          inputs:
            version: 3.x
        - task: DotNetCoreCLI@2
          displayName: Run Tests
          inputs: 
            command: test
        - script: eng\common\cibuild.cmd
            -configuration $(_BuildConfig)
            -projects src/Signing/SignScripts.csproj
            -prepareMachine
            $(_InternalBuildArgs)
            /p:Test=false
            /p:DotNetSignType=$(_SignType)
            /p:TeamName=$(_TeamName)
          displayName: Sign dotnet-install.ps1
        - ${{ if eq(variables._RunAsInternal, True) }}:
          - task: PowerShell@2
            displayName: Validate Signature
            inputs:
              filePath: eng/common/sdk-task.ps1
              arguments: -task SigningValidation -restore -msbuildEngine vs 
                /p:InputFiles='$(Build.Repository.LocalPath)/artifacts/bin/SignScripts/**/*.ps1'
                /p:PackageBasePath='$(Build.Repository.LocalPath)/artifacts/bin/SignScripts/'
          # Signing step overrides the default SDK version to 5.0. Reinstall is needed.
          - task: UseDotNet@2
            displayName: Get .NET Core SDK
            inputs:
              # Azure Functions client library (v3.0.9) has a dependency on SDK 3.x
              version: 3.x
          - task: DotNetCoreCLI@2
            displayName: Publish functions to folder
            inputs:
              command: publish
              arguments: '--configuration Release --output publish_output'
              projects: src/MonitoringFunctions/MonitoringFunctions.csproj
              publishWebProjects: false
              modifyOutputPath: false
              zipAfterPublish: false
          - task: ArchiveFiles@2
            displayName: "Archive files"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/publish_output"
              includeRootFolder: false
              archiveFile: "$(System.DefaultWorkingDirectory)/build$(Build.BuildId).zip"
          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'InstallScripts_KeyVault'
              appType: 'functionApp'
              WebAppName: 'dotnet-install-daemon-functions'
              deployToSlotOrASE: true
              ResourceGroupName: 'Dotnet-Install-Monitoring'
              SlotName: 'production'
              packageForLinux: '$(System.DefaultWorkingDirectory)/build$(Build.BuildId).zip'

- ${{ if eq(variables._RunAsInternal, True) }}:
  - stage: ValidateSdk
    displayName: Validate Arcade SDK
    dependsOn: build
    jobs:
    - template: /eng/validate-sdk.yml
      parameters:
        buildArgs: -configuration $(_BuildConfig) 
          -prepareMachine
          $(_InternalBuildArgs)
          /p:Test=false
  - template: eng\common\templates\post-build\post-build.yml
    parameters:
      enableSigningValidation: false
      enableNugetValidation: false
      # Symbol validation isn't being very reliable lately. This should be enabled back
      # once this issue is resolved: https://github.com/dotnet/arcade/issues/2871
      enableSymbolValidation: false
      # Sourcelink validation isn't passing for Arcade due to some regressions. This should be
      # enabled back once this issue is resolved: https://github.com/dotnet/arcade/issues/2912
      enableSourceLinkValidation: false
      publishDependsOn:
      - Validate
      - ValidateSdk
      # This is to enable SDL runs part of Post-Build Validation Stage
      SDLValidationParameters:
        enable: true
        continueOnError: false
        params: ' -SourceToolsList @("policheck","credscan")
        -TsaInstanceURL $(_TsaInstanceURL)
        -TsaProjectName $(_TsaProjectName)
        -TsaNotificationEmail $(_TsaNotificationEmail)
        -TsaCodebaseAdmin $(_TsaCodebaseAdmin)
        -TsaBugAreaPath $(_TsaBugAreaPath)
        -TsaIterationPath $(_TsaIterationPath)
        -TsaRepositoryName "Install-Scripts"
        -TsaCodebaseName "Install-Scripts"
        -TsaPublish $True'
      useBuildManifest: ${{ variables['_UseBuildManifest'] }}
